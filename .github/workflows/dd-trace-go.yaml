name: dd-trace-go
on:
  push:
  workflow_dispatch:
    inputs:
      ref:
        description: 'git repository ref'
        required: true
        default: 'v1'
  schedule:
    - cron: "0 0 * * *"
jobs:
  native:
    strategy:
      matrix:
        runs-on: [ macos-latest, ubuntu-latest, windows-latest ]
        go-version: [ 1, 1.17, 1.16, 1.15, 1.14 ]
        cgo_enabled:
          - 0 # test it compiles when cgo is disabled
          - 1
        build_tags:
          - ""
          - "appsec"
        appsec_enabled:
          - true
          - false
      fail-fast: false
    runs-on: ${{ matrix.runs-on }}
    steps:
      - uses: actions/checkout@v2
        with:
          repository: DataDog/dd-trace-go
          ref: "${{ github.event.inputs.logLevel }}"
      - name: Setup go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
      - run: go get -v -d -t ./internal/appsec/... ./contrib/google.golang.org/grpc/... ./contrib/gorilla/mux/... ./contrib/labstack/... ./contrib/go-chi/... ./contrib/net/http/...
      - run: env GODEBUG="cgocheck=2" CGO_ENABLED=${{ matrix.cgo_enabled }} DD_APPSEC_ENABLED=${{ matrix.appsec_enabled }} go test  -mod=mod -v -tags "${{ matrix.build_tags }}" ./internal/appsec/... ./contrib/google.golang.org/grpc/... ./contrib/gorilla/mux/... ./contrib/labstack/... ./contrib/go-chi/... ./contrib/net/http/...

  # Same tests but on the official golang container for linux
  # Docker for Windows is not yet available on Github Actions.
  golang-linux-container:
    strategy:
      matrix:
        go-version: [ 1, 1.17, 1.16, 1.15, 1.14 ]
        distribution: [ buster, alpine ]
        cgo_enabled:
          - 0 # test it compiles when cgo is disabled
          - 1
        build_tags:
          - ""
          - "appsec"
        appsec_enabled:
          - true
          - false
      fail-fast: false
    runs-on: ubuntu-latest
    container:
      image: golang:${{ matrix.go-version }}-${{ matrix.distribution }}
    steps:
      - uses: actions/checkout@v2
        with:
          repository: DataDog/dd-trace-go
          ref: "${{ github.event.inputs.logLevel }}"
      # Install gcc and the libc headers on alpine images
      - if: ${{ matrix.distribution == 'alpine' }}
        run: apk add gcc musl-dev libc6-compat git
      - run: go get -v -d -t ./internal/appsec/... ./contrib/google.golang.org/grpc/... ./contrib/gorilla/mux/... ./contrib/labstack/... ./contrib/go-chi/... ./contrib/net/http/...
      - run: env GODEBUG="cgocheck=2" CGO_ENABLED=${{ matrix.cgo_enabled }} DD_APPSEC_ENABLED=${{ matrix.appsec_enabled }} go test -mod=mod -v -tags "${{ matrix.build_tags }}" ./internal/appsec/... ./contrib/google.golang.org/grpc/... ./contrib/gorilla/mux/... ./contrib/labstack/... ./contrib/go-chi/... ./contrib/net/http/...

  # debian stretch doesn't have the latest go versions
  golang-debian-stretch-container:
    strategy:
      matrix:
        go-version: [ 1.14 ]
        cgo_enabled:
          - 0 # test it compiles when cgo is disabled
          - 1
        build_tags:
          - ""
          - "appsec"
        appsec_enabled:
          - true
          - false
      fail-fast: false
    runs-on: ubuntu-latest
    container:
      image: golang:${{ matrix.go-version }}-stretch
    steps:
      - uses: actions/checkout@v2
        with:
          repository: DataDog/dd-trace-go
          ref: "${{ github.event.inputs.logLevel }}"
      - run: go get -v -d -t ./internal/appsec/... ./contrib/google.golang.org/grpc/... ./contrib/gorilla/mux/... ./contrib/labstack/... ./contrib/go-chi/... ./contrib/net/http/...
      - run: env GODEBUG="cgocheck=2" CGO_ENABLED=${{ matrix.cgo_enabled }} DD_APPSEC_ENABLED=${{ matrix.appsec_enabled }} go test -mod=mod -v -tags "${{ matrix.build_tags }}" ./internal/appsec/... ./contrib/google.golang.org/grpc/... ./contrib/gorilla/mux/... ./contrib/labstack/... ./contrib/go-chi/... ./contrib/net/http/...
